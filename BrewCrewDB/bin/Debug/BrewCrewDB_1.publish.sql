/*
Deployment script for BrewCrewDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BrewCrewDB"
:setvar DefaultFilePrefix "BrewCrewDB"
:setvar DefaultDataPath "C:\Users\Jasmine Kaur\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Jasmine Kaur\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustomerID]        INT           IDENTITY (1, 1) NOT NULL,
    [CustomerFirstName] NVARCHAR (50) NOT NULL,
    [CustomerLastName]  NVARCHAR (50) NOT NULL,
    [CustomerEmail]     NVARCHAR (50) NOT NULL,
    [CustomerPhone]     NVARCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([CustomerID] ASC)
);


GO
PRINT N'Creating [dbo].[Drink]...';


GO
CREATE TABLE [dbo].[Drink] (
    [DrinkID]          INT            IDENTITY (1001, 1) NOT NULL,
    [DrinkName]        NVARCHAR (50)  NOT NULL,
    [DrinkDescription] NVARCHAR (150) NOT NULL,
    [DrinkCalories]    INT            NOT NULL,
    [DrinkPrice]       DECIMAL (8, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([DrinkID] ASC)
);


GO
PRINT N'Creating [dbo].[Order]...';


GO
CREATE TABLE [dbo].[Order] (
    [OrderID]    INT            IDENTITY (10001, 1) NOT NULL,
    [CustomerID] INT            NOT NULL,
    [TotalPrice] DECIMAL (8, 2) NOT NULL,
    [Date]       DATE           NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderID] ASC)
);


GO
PRINT N'Creating [dbo].[OrderDetails]...';


GO
CREATE TABLE [dbo].[OrderDetails] (
    [OrderID]       INT NOT NULL,
    [DrinkID]       INT NOT NULL,
    [ToppingID]     INT NOT NULL,
    [DrinkQuantity] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderID] ASC, [DrinkID] ASC, [ToppingID] ASC)
);


GO
PRINT N'Creating [dbo].[Topping]...';


GO
CREATE TABLE [dbo].[Topping] (
    [ToppingID]          INT            IDENTITY (2001, 1) NOT NULL,
    [ToppingName]        NVARCHAR (50)  NOT NULL,
    [ToppingDescription] NVARCHAR (100) NOT NULL,
    [ToppingCalories]    INT            NOT NULL,
    [ToppingPrice]       DECIMAL (8, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([ToppingID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Order_Customer]...';


GO
ALTER TABLE [dbo].[Order]
    ADD CONSTRAINT [FK_Order_Customer] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customer] ([CustomerID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrderDetail_Order]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD CONSTRAINT [FK_OrderDetail_Order] FOREIGN KEY ([OrderID]) REFERENCES [dbo].[Order] ([OrderID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrderDetail_Drink]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD CONSTRAINT [FK_OrderDetail_Drink] FOREIGN KEY ([DrinkID]) REFERENCES [dbo].[Drink] ([DrinkID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrderDetail_Topping]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD CONSTRAINT [FK_OrderDetail_Topping] FOREIGN KEY ([ToppingID]) REFERENCES [dbo].[Topping] ([ToppingID]) ON UPDATE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd103cc35-2093-4571-8b13-9c0676f2d18e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d103cc35-2093-4571-8b13-9c0676f2d18e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bcd9b31f-4c87-407b-a30f-38051fa411d3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bcd9b31f-4c87-407b-a30f-38051fa411d3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6313bac8-eee0-437b-b4ac-412503f0994d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6313bac8-eee0-437b-b4ac-412503f0994d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3d6bfe8b-0371-4fe4-ae05-9b670c1fa503')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3d6bfe8b-0371-4fe4-ae05-9b670c1fa503')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '18017903-2546-49bc-b52a-80cc874037cd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('18017903-2546-49bc-b52a-80cc874037cd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'adf4312e-23fa-4cc2-9276-d5fcd8f79131')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('adf4312e-23fa-4cc2-9276-d5fcd8f79131')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '57a27e20-e98b-4208-95d3-d27b841a72eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('57a27e20-e98b-4208-95d3-d27b841a72eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0ec1caf2-b2d4-425b-8b58-aff70af53d91')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0ec1caf2-b2d4-425b-8b58-aff70af53d91')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '67b56714-3725-4562-b0e7-4e56c010ab41')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('67b56714-3725-4562-b0e7-4e56c010ab41')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '79683c71-0363-4eb5-a803-cfaf067731ab')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('79683c71-0363-4eb5-a803-cfaf067731ab')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e95a27d-7315-4164-91b7-31c7b2b1e728')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e95a27d-7315-4164-91b7-31c7b2b1e728')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e809d14c-66fd-4b80-9f6b-db397448f5f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e809d14c-66fd-4b80-9f6b-db397448f5f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a09565ff-4da2-403c-b280-8c4d8f75f623')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a09565ff-4da2-403c-b280-8c4d8f75f623')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

use BrewCrewDB

GO
/*Inserting admin and customer details*/
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Jasmine','Kaur','admin@brewcrew.com','1234567789');
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Tushit','Kanuri','tushit@gmail.com','5678912398')
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Gurjit','Multani','gurjit@gmail.com','7783878292');
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Ravjagir','Singh','rouble@gmail.com','7788912398');
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Karen','Rilka','karen@gmail.com','9034567789');
INSERT INTO Customer([CustomerFirstName],[CustomerLastName],[CustomerEmail],[CustomerPhone]) VALUES('Vlad','Bors','vlad@gmail.com','8778912398');

GO

/*Inserting all Drinks*/
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Matcha Red Bean Milk Tea','A spin on traditional Matcha green, topped with red bean for added flavour',540,4.15);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Hazelnut Chocolate Milk Tea','A decadent combination of rich, chocolatey, and nutty all in one',340,4.50);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Caramel Milk Tea','Smooth and creamy with the bold taste of caramel',410,4.75);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Jasmine Green Milk Tea','A fragnant and delicate brew, paired with the rich creaminess of milk tea',270,4.10);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('BrewCrew Pearl Milk Tea','Tapioca pearls add a pleasant texture to our signature milk tea, a best selling fan favorite',350,5.99);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Grass Jelly Roasted Milk Tea','Our most popular drink! Grass jelly adds a satisfying texture to our delicious classic roasted milk tea ',220,5.20);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Red Bean Pearl Milk Tea','Sweet and full-bodied, our signature milk tea served with tapioca pearls and red beans',410,5.45);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Earl Grey Milk Tea','One of the most recognized flavoured teas in the world: bold and rich with a subtle hint of citrus',270,5.15);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('BrewCrew Triple','Our popular roasted milk tea paired with our top three toppings: pearls, grass jelly, and pudding to create a decadent and flavourful combination',400,7.10);
INSERT INTO Drink([DrinkName],[DrinkDescription],[DrinkCalories],[DrinkPrice]) VALUES('Wintermelon Milk Tea','A summer-time favorite, our wintermelon milk tea has a sweet, robust caramel flavour',260,6.78);

GO

/*Inserting all Toppings*/
INSERT INTO Topping([ToppingName],[ToppingDescription],[ToppingCalories],[ToppingPrice]) VALUES('Coffee Jelly','Coffee jelly is a jelly dessert flavored with coffee and sugar',34,0.55);
INSERT INTO Topping([ToppingName],[ToppingDescription],[ToppingCalories],[ToppingPrice]) VALUES('Coconut Jelly','Coconut jelly is a dessert produced by the fermentation of coconut water',45,0.45);
INSERT INTO Topping([ToppingName],[ToppingDescription],[ToppingCalories],[ToppingPrice]) VALUES('Pearls','Pearls are small balls of tapioca starch ',68,0.59);
INSERT INTO Topping([ToppingName],[ToppingDescription],[ToppingCalories],[ToppingPrice]) VALUES('Grass Jelly','Grass jelly is a jelly of mint taste and slightly bitter',32,0.99);
INSERT INTO Topping([ToppingName],[ToppingDescription],[ToppingCalories],[ToppingPrice]) VALUES('Mango Jelly','Mango jelly is a jelly dessert flavored with Mango',90,0.50);

GO

INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (2, 10.69, '2020-04-05');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (3, 24.67, '2020-04-08');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (4, 28.50, '2020-04-05');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (5, 5.00, '2020-04-05');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (6, 61.22, '2020-04-08');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (2, 21.54, '2020-04-09');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (3, 74.28, '2020-04-10');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (6, 20.94, '2020-04-08');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (4, 44.55, '2020-04-09');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (6, 22.40, '2020-04-05');
INSERT INTO [Order]([CustomerID],[TotalPrice],[Date]) VALUES (3, 19.78, '2020-04-10');
GO

INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10001, 1005, 2003, 2);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10002, 1001, 2001, 2);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10002, 1002, 2003, 3);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10003, 1004, 2003, 5);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10003, 1002, 2001, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10004, 1002, 2005, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10005, 1006, 2002, 2);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10005, 1010, 2003, 6);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10005, 1008, 2001, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10006, 1009, 2002, 2);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10006, 1007, 2004, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10007, 1006, 2004, 12);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10008, 1005, 2004, 3);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10009, 1010, 2004, 5);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10009, 1006, 2005, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10010, 1008, 2002, 4);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10011, 1007, 2002, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10011, 1009, 2004, 1);
INSERT INTO OrderDetails([OrderID],[DrinkID],[ToppingID],[DrinkQuantity]) VALUES (10011, 1006, 2003, 1);
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
